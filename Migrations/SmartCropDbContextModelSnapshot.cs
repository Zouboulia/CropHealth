// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartCrop.Data;

#nullable disable

namespace SmartCrop.Migrations
{
    [DbContext(typeof(SmartCropDbContext))]
    partial class SmartCropDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("SmartCrop.Models.Crop", b =>
                {
                    b.Property<int>("CropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Variety")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CropId");

                    b.HasIndex("FieldId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("SmartCrop.Models.Farmer", b =>
                {
                    b.Property<int>("FarmerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FarmerId");

                    b.ToTable("Farmers");
                });

            modelBuilder.Entity("SmartCrop.Models.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FarmerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SoilType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FieldId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("SmartCrop.Models.HealthStatus", b =>
                {
                    b.Property<int>("HealthStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CropId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateChecked")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("HealthStatusId");

                    b.HasIndex("CropId");

                    b.ToTable("HealthStatuses");
                });

            modelBuilder.Entity("SmartCrop.Models.Recommendation", b =>
                {
                    b.Property<int>("RecommendationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CropId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("TEXT");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecommendationText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RecommendationId");

                    b.HasIndex("CropId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("SmartCrop.Models.SoilData", b =>
                {
                    b.Property<int>("SoilDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SoilMoisture")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SoilOrganicMatter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SoilType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SoilpH")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SoilDataId");

                    b.HasIndex("FieldId");

                    b.ToTable("SoilData");
                });

            modelBuilder.Entity("SmartCrop.Models.WeatherData", b =>
                {
                    b.Property<int>("WeatherDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Clouds")
                        .HasColumnType("REAL");

                    b.Property<int>("CropId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<double>("Rain")
                        .HasColumnType("REAL");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<double>("UVi")
                        .HasColumnType("REAL");

                    b.HasKey("WeatherDataId");

                    b.HasIndex("CropId");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("SmartCrop.Models.Crop", b =>
                {
                    b.HasOne("SmartCrop.Models.Field", "Field")
                        .WithMany("Crops")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SmartCrop.Models.Field", b =>
                {
                    b.HasOne("SmartCrop.Models.Farmer", "Farmer")
                        .WithMany("Fields")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("SmartCrop.Models.HealthStatus", b =>
                {
                    b.HasOne("SmartCrop.Models.Crop", "Crop")
                        .WithMany()
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("SmartCrop.Models.Recommendation", b =>
                {
                    b.HasOne("SmartCrop.Models.Crop", "Crop")
                        .WithMany()
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("SmartCrop.Models.SoilData", b =>
                {
                    b.HasOne("SmartCrop.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SmartCrop.Models.WeatherData", b =>
                {
                    b.HasOne("SmartCrop.Models.Crop", "Crop")
                        .WithMany()
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("SmartCrop.Models.Farmer", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("SmartCrop.Models.Field", b =>
                {
                    b.Navigation("Crops");
                });
#pragma warning restore 612, 618
        }
    }
}
